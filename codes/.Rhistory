colour = "black",
size = 0.6,
geom = "line",
alpha = 0.7,
group = 1
) +
stat_summary(aes(y = acc, group = 1),
fun.data = "mean_se",
geom = "pointrange",
colour = "black",
size = 0.2,
group = 1) + # adding error bars (standard error)
labs(x = "Block", y = "Poportion of risky choice") +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position="none",
axis.line = element_line(colour = "black")
)
#save graph
dev.off()
#
p
# plot results
###save plot
getwd()
tiff(file="descript_human.tiff",
res=800,width = 800,height = 400)#save tiff
###
colnames(stats)
ggplot(
data = stats,
mapping = aes(
x = n_Block,
y = acc,
group = participant_id,
color = participant_id
)
) +
facet_wrap( ~ TypeTrial) +
theme(strip.background = element_blank(),
strip.text.x = element_text(size = 12, color = "Black")) +
geom_line(alpha = 0.15) +
geom_point(alpha = 0.1, size = 1) +
stat_summary(
aes(y = acc, group = 1),
fun = mean,
colour = "black",
size = 0.6,
geom = "line",
alpha = 0.7,
group = 1
) +
stat_summary(aes(y = acc, group = 1),
fun.data = "mean_se",
geom = "pointrange",
colour = "black",
size = 0.2,
group = 1) + # adding error bars (standard error)
labs(x = "Block", y = "Poportion of risky choice") +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position="none",
axis.line = element_line(colour = "black")
)
#save graph
dev.off()
#
p
# plot results
###save plot
getwd()
tiff(file="descript_human.tiff",
res=800,width = 4000,height = 2000)#save tiff
###
colnames(stats)
ggplot(
data = stats,
mapping = aes(
x = n_Block,
y = acc,
group = participant_id,
color = participant_id
)
) +
facet_wrap( ~ TypeTrial) +
theme(strip.background = element_blank(),
strip.text.x = element_text(size = 12, color = "Black")) +
geom_line(alpha = 0.15) +
geom_point(alpha = 0.1, size = 1) +
stat_summary(
aes(y = acc, group = 1),
fun = mean,
colour = "black",
size = 0.6,
geom = "line",
alpha = 0.7,
group = 1
) +
stat_summary(aes(y = acc, group = 1),
fun.data = "mean_se",
geom = "pointrange",
colour = "black",
size = 0.2,
group = 1) + # adding error bars (standard error)
labs(x = "Block", y = "Poportion of risky choice") +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position="none",
axis.line = element_line(colour = "black")
)
#save graph
dev.off()
#
p
# plot results
###save plot
getwd()
tiff(file="descript_human.tiff",
res=800,width = 4000,height = 3000)#save tiff
###
colnames(stats)
ggplot(
data = stats,
mapping = aes(
x = n_Block,
y = acc,
group = participant_id,
color = participant_id
)
) +
facet_wrap( ~ TypeTrial) +
theme(strip.background = element_blank(),
strip.text.x = element_text(size = 12, color = "Black")) +
geom_line(alpha = 0.15) +
geom_point(alpha = 0.1, size = 1) +
stat_summary(
aes(y = acc, group = 1),
fun = mean,
colour = "black",
size = 0.6,
geom = "line",
alpha = 0.7,
group = 1
) +
stat_summary(aes(y = acc, group = 1),
fun.data = "mean_se",
geom = "pointrange",
colour = "black",
size = 0.2,
group = 1) + # adding error bars (standard error)
labs(x = "Block", y = "Poportion of risky choice") +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position="none",
axis.line = element_line(colour = "black")
)
#save graph
dev.off()
#
p
# plot results
###save plot
getwd()
tiff(file="descript_human.tiff",
res=800,width = 4000,height = 2500)#save tiff
###
colnames(stats)
ggplot(
data = stats,
mapping = aes(
x = n_Block,
y = acc,
group = participant_id,
color = participant_id
)
) +
facet_wrap( ~ TypeTrial) +
theme(strip.background = element_blank(),
strip.text.x = element_text(size = 12, color = "Black")) +
geom_line(alpha = 0.15) +
geom_point(alpha = 0.1, size = 1) +
stat_summary(
aes(y = acc, group = 1),
fun = mean,
colour = "black",
size = 0.6,
geom = "line",
alpha = 0.7,
group = 1
) +
stat_summary(aes(y = acc, group = 1),
fun.data = "mean_se",
geom = "pointrange",
colour = "black",
size = 0.2,
group = 1) + # adding error bars (standard error)
labs(x = "Block", y = "Poportion of risky choice") +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position="none",
axis.line = element_line(colour = "black")
)
#save graph
dev.off()
#
p
library(tidyverse)
library(ggplot2)
library(bruceR)
library(qdapRegex)
df <- read.csv("~/Desktop/nma2022_project_RL_riskychoice/data/pigeon_data.csv")
unique(df$Subject) #6 pigeons
#check the data
df_c <- df %>%
dplyr::select(
"participant_id" = "Subject",
"Trial",
"Session",
"Right.Path",
"Left.Path",
"response" = "Path.Taken",
) %>%
dplyr::group_by(participant_id, Session) %>%
dplyr::summarise(n = n())
df_p <- df %>%
dplyr::select(
"participant_id" = "Subject",
"Trial",
"Session",
"Right.Path",
"Left.Path",
"response" = "Path.Taken",
) %>%
dplyr::filter(participant_id != 948 | Session != 11) %>% #filter sessions that does not have 10 trials
dplyr::filter(participant_id != 948 | Session != 12) %>%
dplyr::filter(participant_id != 2767 |Session != 5) %>%
dplyr::filter(participant_id != 2767 |Session != 7)
dplyr::group_by(participant_id, Session) %>%
dplyr::summarise(n = n())
df_p
df_p <- df %>%
dplyr::select(
"participant_id" = "Subject",
"Trial",
"Session",
"Right.Path",
"Left.Path",
"response" = "Path.Taken",
) %>%
dplyr::filter(participant_id != 948 | Session != 11) %>% #filter sessions that does not have 10 trials
dplyr::filter(participant_id != 948 | Session != 12) %>%
dplyr::filter(participant_id != 2767 |Session != 5) %>%
dplyr::filter(participant_id != 2767 |Session != 7)
#
dplyr::group_by(participant_id, Session) %>%
dplyr::summarise(n = n())
df1 <- df_p %>% filter(participant_id == 948) %>%
mutate(Session_n = rep(1:(length(Trial) / 10), each = 10)) %>% select(-Session) %>% rename(Session = Session_n)
df2 <- df_p %>% filter(participant_id == 2767) %>%
mutate(Session_n = rep(1:(length(Trial) / 10), each = 10)) %>% select(-Session) %>% rename(Session = Session_n)
df3 <-
df_p %>% filter(participant_id != 948 & participant_id != 2767)
df4 <- rbind(df1, df2,df3)
df_clean <-
df4 %>% dplyr::filter(Session <= 36) %>%
group_by(participant_id) %>%
dplyr::mutate(n_session = rep(1:6, each = 60)) %>%
ungroup() %>% select(-Session) %>% rename("Session"  = "n_session") %>%
dplyr::filter(
Right.Path != "x" &
Left.Path != "x" &
Left.Path != "" &
Right.Path != "" &
Left.Path != "orange (0)" &
Right.Path != "orange (0)" &
Left.Path != "orange(0)" &
Right.Path != "orange(0)"
) %>% #exclude invalid trials
dplyr::filter(response == "right" |
response == "left") %>% #exclude no response
mutate(x1 = qdapRegex::ex_between(Right.Path, "(", ")")) %>%
mutate(Right = as.vector(unlist(x1[]))) %>% #extract value from two sides
mutate(x2 = qdapRegex::ex_between(Left.Path, "(", ")")) %>%
mutate(Left = as.vector(unlist(x2[]))) %>%
dplyr::filter(Right != "0" &  #only leave 1,3 condition
Right !=  "2"&
Right !=  "4"&
Left != "0" &
Left !=  "2"&
Left !=  "4") %>% select(-Left.Path,-Right.Path,-x1,-x2)
# remove final results
df_clean$Right <- gsub("\\=.*", "", df_clean$Right)
df_clean$Left <- gsub("\\=.*", "", df_clean$Left)
# mark
dfx <- df_clean %>% mutate(Right.value = case_when(
Right == "2/4" ~ "3", # mark value
Right == "0/2" ~ "1",
Right == "1" ~ "1", # mark value
Right == "3" ~ "3"
,
)) %>%
mutate(Left.value = case_when(
Left == "2/4" ~ "3", # mark value
Left == "0/2" ~ "1",
Left == "1" ~ "1",
Left == "3" ~ "3"
)) %>%
mutate(condition = case_when(
Left.value == Right.value ~ "Decision Trial", # mark value
Left.value != Right.value ~ "Catch Trial"
)) %>%
mutate(expected_response = case_when( # mark risky choice
condition == "Decision Trial" & Right == "2/4"~ "right",
condition == "Decision Trial" & Right == "0/2"~ "right",
condition == "Decision Trial" & Right == "1"~ "left",
condition == "Decision Trial" & Right == "3"~ "left",
condition == "Catch Trial" & Right == "1" & Left == "3"~ "left",
condition == "Catch Trial" & Right == "3" & Left == "1"~ "right",
condition == "Catch Trial" & Right == "1" & Left == "2/4"~ "left",
condition == "Catch Trial" & Right == "2/4" & Left == "1"~ "right",
condition == "Catch Trial" & Right == "0/2" & Left == "3"~ "left",
condition == "Catch Trial" & Right == "3" & Left == "0/2"~ "right",
condition == "Catch Trial" & Right == "0/2" & Left == "2/4"~ "left",
condition == "Catch Trial" & Right == "2/4" & Left == "0/2"~ "right")) %>%
dplyr::mutate(
is_correct =
case_when( #mark accuracy
response == expected_response ~ "1",
response != expected_response ~ "0"
)
)  %>% mutate_at(vars(Session, participant_id,condition), as.factor) %>%
dplyr::filter (participant_id != "2767") %>%
select(-Right.value,-Left.value)
colnames(dfx)
head(dfx)
#summary stats
stats2 <- dfx %>%
dplyr::group_by(participant_id, Session, condition) %>%
mutate(across("is_correct", as.numeric)) %>%
dplyr::summarise(n = n(),
acc = mean(is_correct)) %>%
mutate_at(vars(Session, participant_id), as.factor)
#plotting
p <- ggplot(
data = stats2,
mapping = aes(
x = Session,
y = acc,
group = participant_id,
color = participant_id
)
) +
geom_line(alpha = 0.2) +
geom_point(alpha = 0.2, size = 1) +
facet_wrap( ~ condition) +
stat_summary(
aes(y = acc, group = 1),
fun.y = mean,
colour = "red",
size = 0.8,
geom = "line",
group = 1
)  +
labs(x = "Block",y = "poportion of risky choice") +
theme_bw()
p
ggplot(
data = stats2,
mapping = aes(
x = Session,
y = acc,
group = participant_id,
color = participant_id
)
)  +
facet_wrap(~ TypeTrial) +
theme(strip.background = element_blank(),
strip.text.x = element_text(size = 12, color = "Black")) +
geom_line(alpha = 0.15) +
geom_point(alpha = 0.1, size = 1) +
stat_summary(
aes(y = acc, group = 1),
fun = mean,
colour = "black",
size = 0.6,
geom = "line",
alpha = 0.7,
group = 1
) +
stat_summary(
aes(y = acc, group = 1),
fun.data = "mean_se",
geom = "pointrange",
colour = "black",
size = 0.2,
group = 1
) + # adding error bars (standard error)
labs(x = "Block", y = "Poportion of risky choice") +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "none",
axis.line = element_line(colour = "black")
)
stats2
ggplot(
data = stats2,
mapping = aes(
x = Session,
y = acc,
group = participant_id,
color = participant_id
)
)  +
facet_wrap(~ condition) +
theme(strip.background = element_blank(),
strip.text.x = element_text(size = 12, color = "Black")) +
geom_line(alpha = 0.15) +
geom_point(alpha = 0.1, size = 1) +
stat_summary(
aes(y = acc, group = 1),
fun = mean,
colour = "black",
size = 0.6,
geom = "line",
alpha = 0.7,
group = 1
) +
stat_summary(
aes(y = acc, group = 1),
fun.data = "mean_se",
geom = "pointrange",
colour = "black",
size = 0.2,
group = 1
) + # adding error bars (standard error)
labs(x = "Block", y = "Poportion of risky choice") +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "none",
axis.line = element_line(colour = "black")
)
#summary stats
stats2 <- dfx %>%
dplyr::group_by(participant_id, Session, condition) %>%
mutate(across("is_correct", as.numeric)) %>%
dplyr::summarise(n = n(),
acc = mean(is_correct)) %>%
mutate_at(vars(Session, participant_id), as.factor)
#plotting
###save plot
tiff(
file = "descript_pigeon.tiff",
res = 800,
width = 4000,
height = 2500
)#save tiff
###
ggplot(
data = stats2,
mapping = aes(
x = Session,
y = acc,
group = participant_id,
color = participant_id
)
)  +
facet_wrap(~ condition) +
theme(strip.background = element_blank(),
strip.text.x = element_text(size = 12, color = "Black")) +
geom_line(alpha = 0.15) +
geom_point(alpha = 0.1, size = 1) +
stat_summary(
aes(y = acc, group = 1),
fun = mean,
colour = "black",
size = 0.6,
geom = "line",
alpha = 0.7,
group = 1
) +
stat_summary(
aes(y = acc, group = 1),
fun.data = "mean_se",
geom = "pointrange",
colour = "black",
size = 0.2,
group = 1
) + # adding error bars (standard error)
labs(x = "Block", y = "Poportion of risky choice") +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
legend.position = "none",
axis.line = element_line(colour = "black")
)
#save graph
dev.off()
