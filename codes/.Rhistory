df_decision <- df_new %>%
dplyr::filter(TypeTrial == "Decision Trial") %>% #only select decision
dplyr::mutate(
ValueCondition =
case_when(
#mark high vs low value
StimType == "102" ~ "Low value",
StimType == "201" ~ "Low value",
StimType == "304" ~ "High value",
StimType == "403" ~ "High value",
)
) %>%
dplyr::select(-RewardAmount, -CumulativeReward)
head(df_decision)
#length(unique(df_new$participant_id)) #check participants’ number
colnames(df_decision)
stats <- df_decision %>%
dplyr::group_by(participant_id, n_Block,ValueCondition) %>%
mutate_at("is_correct", as.numeric) %>%
dplyr::summarise(n = n(),
p_risky = mean(is_correct)) %>%
mutate_at(vars(n_Block, participant_id,ValueCondition), as.factor)
#save stats
#save_data(stats,'df.csv','~/Desktop/')
Data_summary <- summarySE(stats, measurevar="p_risky", groupvars=c("ValueCondition","n_Block"))
Data_summary$n_Block <- as.numeric(Data_summary$n_Block)
ggplot(data = stats,
mapping = aes(x = n_Block,
y = p_risky,
fill = ValueCondition)) +
geom_split_violin(trim = T,
color = "white",
scale = "area") + #绘制分半的小提琴图
geom_point(
data = Data_summary,
aes(x = n_Block, y = p_risky),
pch = 19,
position = position_dodge(0.5),
size = 1
) + #绘制均值为点图
geom_line(data = Data_summary,
mapping = aes(x = n_Block,
y = p_risky,
linetype = ValueCondition))+
geom_errorbar(
data = Data_summary,
aes(ymin = p_risky - ci, ymax = p_risky + ci),
width = 0.05,
position = position_dodge(0.5),
color = "black",
alpha = 0.8,
size = 0.5
) + #add error bar
scale_fill_manual(values = c("#56B4E9", "#E69F00")) +
labs(
x = ("Blocks"),
y = ("Poportion of risky choice"),
x = NULL,
title = "Poportion of risky choice under different expected value condition"
) +
theme_bw()+
stat_compare_means(aes(group = ValueCondition),
label = "p.signif",
method = "t.test",
paired = TRUE,
label.y = max(stats$p_risky),
hide.ns = T) # add paired t-test results
ggplot(data = stats,
mapping = aes(x = n_Block,
y = p_risky,
fill = ValueCondition)) +
geom_split_violin(trim = T,
color = "white",
scale = "area")
View(geom_split_violin)
### original post: https://blog.csdn.net/qazplm12_3/article/details/115683746
#function for sd,se,ci
summarySE <- function(data = NULL,
measurevar,
groupvars = NULL,
na.rm = FALSE,
conf.interval = .95,
.drop = TRUE) {
library(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm = FALSE) {
if (na.rm)
sum(!is.na(x))
else
length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(
data,
groupvars,
.drop = .drop,
.fun = function(xx, col) {
c(
N    = length2(xx[[col]], na.rm = na.rm),
mean = mean   (xx[[col]], na.rm = na.rm),
sd   = sd     (xx[[col]], na.rm = na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- plyr::rename(datac, c("mean" = measurevar))
datac$se <-
datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval / 2 + .5, datac$N - 1)
datac$ci <- datac$se * ciMult
#
return(datac)
}
# function for split violin plot
geom_split_violin <-  function (mapping = NULL,
data = NULL,
stat = "ydensity",
position = "identity",
...,
draw_quantiles = NULL,
trim = TRUE,
scale = "area",
na.rm = FALSE,
show.legend = NA,
inherit.aes = TRUE) {
layer(
data = data,
mapping = mapping,
stat = stat,
geom = GeomSplitViolin,
position = position,
show.legend = show.legend,
inherit.aes = inherit.aes,
params = list(
trim = trim,
scale = scale,
draw_quantiles = draw_quantiles,
na.rm = na.rm,
...
)
)
}
ggplot(data = stats,
mapping = aes(x = n_Block,
y = p_risky,
fill = ValueCondition)) +
geom_split_violin(trim = T,
color = "white",
scale = "area")
Data_summary
ggplot(data = stats,
mapping = aes(x = n_Block,
y = p_risky,
fill = ValueCondition))
library(tidyverse)
library(ggplot2)
library(bruceR)
library(ggpubr)
#
source('convenient_functions.R')
source('Function_for_violin_plot1.R')
getwd()
df <- read.csv("~/Desktop/nma2022_project_RL_riskychoice/data/human_data.csv")
#str(df)
#check data
#xxx <- df %>% filter(Subject ==1)
#xxx2 <- xxx %>% filter(TrialType != "NULL")
#unique(xxx2$Block)
#unique(xxx$Trial) #48 trials in each blocks
#length(xxx2$Trial)
#length(unique(xxx2$StimType))
###
df_new <- df %>% dplyr::select(
"participant_id" = "Subject",
"TrialType",
#three types of trials
"StimType",
#stimulus
"Block",
#6 blocks
"trial_index" = "Trial",
#trial number
"response" = "Choice",
#participants' choice
"RewardAmount",
#amount of reward participants gets
"CumulativeReward" #the cumulated reward participants gets
) %>%
dplyr::filter(TrialType != "NULL") %>% #exclude the breaks
dplyr::mutate(
n_Block = case_when(
#correct the block numbers
Block == "1" ~ "1",
Block == "3" ~ "2",
Block == "5" ~ "3",
Block == "7" ~ "4",
Block == "9" ~ "5",
Block == "11" ~ "6"
)
)  %>%
dplyr::mutate(
TypeTrial = case_when(
#mark types of trials
TrialType == "" ~ "forced_choice",
# only one door
TrialType == "Decision" ~ "Decision Trial",
#chose between the safe and risky options with equal expected values 12/34
TrialType == "Catch" ~ "Catch Trial" # chose between options of unequal expected value (high versus low) 13/14/23/24
)
) %>%
dplyr::filter(TypeTrial != "forced_choice") %>% #exclude one door condition
dplyr::mutate(
expected_response = case_when(
#mark expected response (maximize reward)
StimType == "102" | StimType == "201" ~ "Door2",
#decision
StimType == "103" | StimType == "301" ~ "Door3",
#catch
StimType == "104" | StimType == "401" ~ "Door4",
#catch
StimType == "203" | StimType == "302" ~ "Door3",
#catch
StimType == "204" | StimType == "402" ~ "Door4",
#catch
StimType == "304" | StimType == "403" ~ "Door4" #decision
)
)  %>%
dplyr::mutate(is_correct =
case_when(
#mark accuracy
response == expected_response ~ "1",
response != expected_response ~ "0"
)) %>%
dplyr::select(-Block, -TrialType)
head(df_new)
df_decision <- df_new %>%
dplyr::filter(TypeTrial == "Decision Trial") %>% #only select decision
dplyr::mutate(
ValueCondition =
case_when(
#mark high vs low value
StimType == "102" ~ "Low value",
StimType == "201" ~ "Low value",
StimType == "304" ~ "High value",
StimType == "403" ~ "High value",
)
) %>%
dplyr::select(-RewardAmount, -CumulativeReward)
head(df_decision)
#length(unique(df_new$participant_id)) #check participants’ number
colnames(df_decision)
stats <- df_decision %>%
dplyr::group_by(participant_id, n_Block,ValueCondition) %>%
mutate_at("is_correct", as.numeric) %>%
dplyr::summarise(n = n(),
p_risky = mean(is_correct)) %>%
mutate_at(vars(n_Block, participant_id,ValueCondition), as.factor)
#save stats
#save_data(stats,'df.csv','~/Desktop/')
Data_summary <- summarySE(stats, measurevar="p_risky", groupvars=c("ValueCondition","n_Block"))
Data_summary$n_Block <- as.numeric(Data_summary$n_Block)
ggplot(data = stats,
mapping = aes(x = n_Block,
y = p_risky,
fill = ValueCondition)) +
geom_split_violin(trim = T,
color = "white",
scale = "area") + #绘制分半的小提琴图
geom_point(
data = Data_summary,
aes(x = n_Block, y = p_risky),
pch = 19,
position = position_dodge(0.5),
size = 1
) + #绘制均值为点图
geom_line(data = Data_summary,
mapping = aes(x = n_Block,
y = p_risky,
linetype = ValueCondition))+
geom_errorbar(
data = Data_summary,
aes(ymin = p_risky - ci, ymax = p_risky + ci),
width = 0.05,
position = position_dodge(0.5),
color = "black",
alpha = 0.8,
size = 0.5
) + #add error bar
scale_fill_manual(values = c("#56B4E9", "#E69F00")) +
labs(
x = ("Blocks"),
y = ("Poportion of risky choice"),
x = NULL,
title = "Poportion of risky choice under different expected value condition"
) +
theme_bw()+
stat_compare_means(aes(group = ValueCondition),
label = "p.signif",
method = "t.test",
paired = TRUE,
label.y = max(stats$p_risky),
hide.ns = T) # add paired t-test results
library(tidyverse)
library(ggplot2)
library(bruceR)
library(ggpubr)
#
source('convenient_functions.R')
source('Function_for_violin_plot1.R')
getwd()
ggplot(data = stats,
mapping = aes(x = n_Block,
y = p_risky,
fill = ValueCondition)) +
geom_split_violin(trim = T,
color = "white",
scale = "area") + #绘制分半的小提琴图
geom_point(
data = Data_summary,
aes(x = n_Block, y = p_risky),
pch = 19,
position = position_dodge(0.5),
size = 1
) + #绘制均值为点图
geom_line(data = Data_summary,
mapping = aes(x = n_Block,
y = p_risky,
linetype = ValueCondition))+
geom_errorbar(
data = Data_summary,
aes(ymin = p_risky - ci, ymax = p_risky + ci),
width = 0.05,
position = position_dodge(0.5),
color = "black",
alpha = 0.8,
size = 0.5
) + #add error bar
scale_fill_manual(values = c("#56B4E9", "#E69F00")) +
labs(
x = ("Blocks"),
y = ("Poportion of risky choice"),
x = NULL,
title = "Poportion of risky choice under different expected value condition"
) +
theme_bw()+
stat_compare_means(aes(group = ValueCondition),
label = "p.signif",
method = "t.test",
paired = TRUE,
label.y = max(stats$p_risky),
hide.ns = T) # add paired t-test results
library(tidyverse)
library(ggplot2)
library(bruceR)
library(ggpubr)
#
source('convenient_functions.R')
source('Function_for_violin_plot1.R')
getwd()
library(tidyverse)
library(ggplot2)
library(bruceR)
library(ggpubr)
#
source('convenient_functions.R')
source('Function_for_violin_plot1.R')
getwd()
df <- read.csv("~/Desktop/nma2022_project_RL_riskychoice/data/human_data.csv")
#str(df)
#check data
#xxx <- df %>% filter(Subject ==1)
#xxx2 <- xxx %>% filter(TrialType != "NULL")
#unique(xxx2$Block)
#unique(xxx$Trial) #48 trials in each blocks
#length(xxx2$Trial)
#length(unique(xxx2$StimType))
###
df_new <- df %>% dplyr::select(
"participant_id" = "Subject",
"TrialType",
#three types of trials
"StimType",
#stimulus
"Block",
#6 blocks
"trial_index" = "Trial",
#trial number
"response" = "Choice",
#participants' choice
"RewardAmount",
#amount of reward participants gets
"CumulativeReward" #the cumulated reward participants gets
) %>%
dplyr::filter(TrialType != "NULL") %>% #exclude the breaks
dplyr::mutate(
n_Block = case_when(
#correct the block numbers
Block == "1" ~ "1",
Block == "3" ~ "2",
Block == "5" ~ "3",
Block == "7" ~ "4",
Block == "9" ~ "5",
Block == "11" ~ "6"
)
)  %>%
dplyr::mutate(
TypeTrial = case_when(
#mark types of trials
TrialType == "" ~ "forced_choice",
# only one door
TrialType == "Decision" ~ "Decision Trial",
#chose between the safe and risky options with equal expected values 12/34
TrialType == "Catch" ~ "Catch Trial" # chose between options of unequal expected value (high versus low) 13/14/23/24
)
) %>%
dplyr::filter(TypeTrial != "forced_choice") %>% #exclude one door condition
dplyr::mutate(
expected_response = case_when(
#mark expected response (maximize reward)
StimType == "102" | StimType == "201" ~ "Door2",
#decision
StimType == "103" | StimType == "301" ~ "Door3",
#catch
StimType == "104" | StimType == "401" ~ "Door4",
#catch
StimType == "203" | StimType == "302" ~ "Door3",
#catch
StimType == "204" | StimType == "402" ~ "Door4",
#catch
StimType == "304" | StimType == "403" ~ "Door4" #decision
)
)  %>%
dplyr::mutate(is_correct =
case_when(
#mark accuracy
response == expected_response ~ "1",
response != expected_response ~ "0"
)) %>%
dplyr::select(-Block, -TrialType)
head(df_new)
df_decision <- df_new %>%
dplyr::filter(TypeTrial == "Decision Trial") %>% #only select decision
dplyr::mutate(
ValueCondition =
case_when(
#mark high vs low value
StimType == "102" ~ "Low value",
StimType == "201" ~ "Low value",
StimType == "304" ~ "High value",
StimType == "403" ~ "High value",
)
) %>%
dplyr::select(-RewardAmount, -CumulativeReward)
head(df_decision)
#length(unique(df_new$participant_id)) #check participants’ number
colnames(df_decision)
stats <- df_decision %>%
dplyr::group_by(participant_id, n_Block,ValueCondition) %>%
mutate_at("is_correct", as.numeric) %>%
dplyr::summarise(n = n(),
p_risky = mean(is_correct)) %>%
mutate_at(vars(n_Block, participant_id,ValueCondition), as.factor)
#save stats
#save_data(stats,'df.csv','~/Desktop/')
Data_summary <- summarySE(stats, measurevar="p_risky", groupvars=c("ValueCondition","n_Block"))
Data_summary$n_Block <- as.numeric(Data_summary$n_Block)
ggplot(data = stats,
mapping = aes(x = n_Block,
y = p_risky,
fill = ValueCondition)) +
geom_split_violin(trim = T,
color = "white",
scale = "area") + #绘制分半的小提琴图
geom_point(
data = Data_summary,
aes(x = n_Block, y = p_risky),
pch = 19,
position = position_dodge(0.5),
size = 1
) + #绘制均值为点图
geom_line(data = Data_summary,
mapping = aes(x = n_Block,
y = p_risky,
linetype = ValueCondition))+
geom_errorbar(
data = Data_summary,
aes(ymin = p_risky - ci, ymax = p_risky + ci),
width = 0.05,
position = position_dodge(0.5),
color = "black",
alpha = 0.8,
size = 0.5
) + #add error bar
scale_fill_manual(values = c("#56B4E9", "#E69F00")) +
labs(
x = ("Blocks"),
y = ("Poportion of risky choice"),
x = NULL,
title = "Poportion of risky choice under different expected value condition"
) +
theme_bw()+
stat_compare_means(aes(group = ValueCondition),
label = "p.signif",
method = "t.test",
paired = TRUE,
label.y = max(stats$p_risky),
hide.ns = T) # add paired t-test results
